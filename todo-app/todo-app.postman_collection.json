{
	"info": {
		"_postman_id": "42c2408f-5144-4aa6-9c11-3c9219b2de37",
		"name": "todo-app",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "42549977"
	},
	"item": [
		{
			"name": "get",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is within an acceptable range\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Verify the response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.results).to.be.an('array');\r",
							"    \r",
							"    responseData.results.forEach(function(task) {\r",
							"        pm.expect(task).to.have.property('id');\r",
							"        pm.expect(task).to.have.property('title');\r",
							"        pm.expect(task).to.have.property('description');\r",
							"        pm.expect(task).to.have.property('status');\r",
							"        pm.expect(task).to.have.property('created_at');\r",
							"    });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"ID is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  responseData.results.forEach(function(result) {\r",
							"    pm.expect(result.id).to.be.a('number').and.to.be.at.least(0);\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Title, description, status, and created_at are non-empty strings\", function () {\r",
							"    const responseData = pm.response.json().results;\r",
							"    \r",
							"    responseData.forEach(function(task) {\r",
							"        pm.expect(task.title).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Title should not be empty\");\r",
							"        pm.expect(task.description).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Description should not be empty\");\r",
							"        pm.expect(task.status).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Status should not be empty\");\r",
							"        pm.expect(task.created_at).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Created_at should not be empty\");\r",
							"    });\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "post",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.expect(pm.response.code).to.equal(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields - message and taskId\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"    pm.expect(responseData.taskId).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"  pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"TaskId is a non-negative integer\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.taskId).to.be.a('number').and.to.be.at.least(0);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"new\",\r\n    \"description\": \"Xây dựng API với Node.js và MySQL\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Validate the structure of the results array\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  \r",
							"  pm.expect(responseData).to.be.an('object');\r",
							"  pm.expect(responseData.results).to.be.an('array');\r",
							"  responseData.results.forEach(function(result) {\r",
							"    pm.expect(result).to.be.an('object');\r",
							"    pm.expect(result.id).to.be.a('number');\r",
							"    pm.expect(result.title).to.be.a('string');\r",
							"    pm.expect(result.description).to.be.a('string');\r",
							"    pm.expect(result.status).to.be.a('string');\r",
							"    pm.expect(result.created_at).to.be.a('string');\r",
							"  });\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Each 'result' object has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.results).to.be.an('array').that.is.not.empty;\r",
							"    \r",
							"    responseData.results.forEach(function(result) {\r",
							"        pm.expect(result).to.have.property('id');\r",
							"        pm.expect(result).to.have.property('title');\r",
							"        pm.expect(result).to.have.property('description');\r",
							"        pm.expect(result).to.have.property('status');\r",
							"        pm.expect(result).to.have.property('created_at');\r",
							"    });\r",
							"});\r",
							"pm.test(\"Each 'result' title contains the search keyword\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const searchKeyword = responseData.search.toLowerCase();\r",
							"    \r",
							"    responseData.results.forEach(function(result) {\r",
							"        const title = result.title.toLowerCase();\r",
							"        pm.expect(title).to.include(searchKeyword);\r",
							"    });\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/tasks?search=API&page=1&limit=10",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks"
					],
					"query": [
						{
							"key": "search",
							"value": "API"
						},
						{
							"key": "page",
							"value": "1"
						},
						{
							"key": "limit",
							"value": "10"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "put",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.eql(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required field 'message'\", function () {\r",
							"  const responseData = pm.response.json();\r",
							"  pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content-Type header is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"title\": \"Học RESTful API ***\",\r\n    \"description\": \"Xây dựng API với Node.js và MySQL ***\",\r\n    \"status\": \"completed\"\r\n}\r\n",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/api/tasks/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Copy 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"  pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData).to.have.property('page');\r",
							"    pm.expect(responseData).to.have.property('limit');\r",
							"    pm.expect(responseData).to.have.property('total');\r",
							"    pm.expect(responseData).to.have.property('totalPages');\r",
							"    pm.expect(responseData).to.have.property('search');\r",
							"    pm.expect(responseData).to.have.property('results');\r",
							"});\r",
							"\r",
							"pm.test(\"Response time is less than 200ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(200);\r",
							"});\r",
							"pm.test(\"Specific result ID of 4 is present in the response\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    const resultIds = responseData.results.map(result => result.id);\r",
							"    pm.expect(resultIds).to.include(4);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/tasks?search=API",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks"
					],
					"query": [
						{
							"key": "search",
							"value": "API"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "delete",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Content type is application/json\", function () {\r",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response has the required fields\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData).to.be.an('object');\r",
							"    pm.expect(responseData.message).to.exist;\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Message is a non-empty string\", function () {\r",
							"    const responseData = pm.response.json();\r",
							"    \r",
							"    pm.expect(responseData.message).to.be.a('string').and.to.have.lengthOf.at.least(1, \"Message should not be empty\");\r",
							"});\r",
							"\r",
							"\r",
							"pm.test(\"Response time is less than 500ms\", function () {\r",
							"  pm.expect(pm.response.responseTime).to.be.below(500);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/tasks/4",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks",
						"4"
					]
				}
			},
			"response": []
		},
		{
			"name": "get Copy 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Response status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"\r",
							"// Test to check for the presence of at least 3 IDs in the response results\r",
							"pm.test(\"3 IDs are present in the response results\", function () {\r",
							"    pm.expect(pm.response.json().results).to.be.an('array').and.to.have.lengthOf(3);\r",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "http://localhost:5000/api/tasks",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"api",
						"tasks"
					]
				}
			},
			"response": []
		},
		{
			"name": "post login",
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"username\":\"admin\", \"password\":\"password\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "http://localhost:5000/login",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "get admin (need token from above))",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"auth": {
					"type": "noauth"
				},
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6ImFkbWluIiwicm9sZSI6ImFkbWluIiwiaWF0IjoxNzQwNDk4MjUwLCJleHAiOjE3NDA1MDE4NTB9.gTVjrHzm-L_z8NEE_RCf7lQTabVu800l0UH8mRRD3rU",
						"type": "text"
					}
				],
				"url": {
					"raw": "http://localhost:5000/admin",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "5000",
					"path": [
						"admin"
					]
				}
			},
			"response": []
		}
	]
}